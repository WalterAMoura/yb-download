openapi: 3.0.0
info:
  title: agenda-v4 docker
  version: 1.0.0
servers:
  - url: http://localhost:80/app-agenda-v4/api
    description: Local server

paths:
  /v1:
    get:
      summary: Get Info API
      operationId: getInfoApi
      security:
        - bearerAuth: []
      parameters:
        - name: x-api-key
          in: header
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: "Application name"
                  version:
                    type: string
                    example: "v1"
                  author:
                    type: string
                    example: "Author name"
                  email:
                    type: string
                    example: "author@email.com.br"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid authentication credentials."
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Acesso negado."

  /v1/auth:
    post:
      summary: Gerar Token
      operationId: gerarToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: email@email.com.br
                password:
                  type: string
                  example: password
      parameters:
        - name: x-api-key
          in: header
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "eyJhbGciOiJBMjU2S1ciLCJlbmMiOiJBMjU2Q0JDLUhTNTEyIiwiemlwIjoiREVGIn0.k8Ejn9PGZSF7mveUhUZeN9r9HZOVFGpiC2XDZBOR6RLw2UPf3piueEo0DtJ26fimTstMUldrXd632JW6UrnUB1asCDtpxw8r.zjvUHd8CnHon36yB9-b8zA.oAYnj-hQ7a85ivEicb0nauiXEAlTZX4-v4w7z-S8BxG1kCtCzaNrwcTligpHB7j4DYkFZeXAqLhZ0Bjhch9CVZoXCcfXXNToxOh0xnm4huqRUTpW8mTcT-nKYySYyEgXIkWHaT29G5ZqKHRHxLT6JGUt6Fqg1AlpAqrJCSHTJQDziC4G1G_cpV8E41l9ciKfZdqKWzAJa5qmEvN20xzKNbGVSUQrjBhjXFsFwRZU_3BxSutP0fXT2YdGMyZ8IKlJkIVWWbN5YOFp7Xfm5WoRKemgUu-BcWqGmZPSgOVGKIpnxCGqy5EtceoTklpNmoxh.HLzf2F7vW6MiCtFoAJWOCOBeHcid1dWaVDh6a1MwWLU"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid authentication credentials."
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Usuário ou senha são inválidos."
              examples:
                default:
                  summary: Error autenticação
                  value:
                    error: "Usuário ou senha são inválidos."
                example2:
                  summary: Error campos
                  value:
                    error: "Os campos 'username' e 'password' são obrigatórios."


  /v1/check:
    post:
      summary: Check Token
      operationId: checkToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: '{{authorization}}'
      parameters:
        - name: x-api-key
          in: header
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Authorized"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "O campo 'token' é obrigatórios."
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Acesso negado."
              examples:
                default:
                  summary: Acesso negado
                  value:
                    error: "Acesso negado."
                example2:
                  summary: Error token
                  value:
                    error: "Acesso negado: Unsupported input."

  /v1/event:
    get:
      summary: Get Events
      operationId: getEvents
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            example: 25
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object

  /v1/ask-to-change/overdue:
    post:
      summary: Update Overdue AskToChange
      operationId: updateOverdueAskToChange
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              example: {}
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object

  /v1/event/1:
    get:
      summary: Get By Event
      operationId: getByEvent
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object

  /v1/event/131:
    get:
      summary: Get By Event Copy
      operationId: getByEventCopy
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
